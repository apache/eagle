<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<application>
    <type>MR_RUNNING_JOB_APP</type>
    <name>Map Reduce Running Job</name>
    <configuration>
        <property>
            <name>workers</name>
            <displayName>Worker Number</displayName>
            <description>the number of storm workers will be used</description>
            <value>3</value>
        </property>
        <property>
            <name>stormConfig.mrRunningJobFetchSpoutTasks</name>
            <displayName>Read Task Number</displayName>
            <description>number of tasks to fetch map reduce running jobs from resource manager</description>
            <value>1</value>
        </property>
        <property>
            <name>stormConfig.mrRunningJobParseBoltTasks</name>
            <displayName>Parse Task Number</displayName>
            <description>number of tasks to parse map reduce running jobs got from resource manager</description>
            <value>5</value>
        </property>
        <property>
            <name>endpointConfig.fetchRunningJobInterval</name>
            <displayName>Interval of Fetching Running Jobs in Seconds</displayName>
            <description>interval of fetch map reduce running jobs from resource manager</description>
            <value>300</value>
        </property>
        <property>
            <name>endpointConfig.requestsNum</name>
            <displayName>Request Number of Fetching Running Jobs</displayName>
            <description>number of requests separated by time ranges</description>
            <value>1</value>
        </property>
        <property>
            <name>endpointConfig.limitPerRequest</name>
            <displayName>Application Number Limit of Each Request</displayName>
            <description>limit of applications in each request</description>
            <value></value>
        </property>
        <property>
            <name>endpointConfig.timeRangePerRequestInMin</name>
            <displayName>StartedTime Range for Each Request in Minutes</displayName>
            <description>time range for each request in minutes if request number > 1</description>
            <value>60</value>
        </property>

        <property>
            <name>endpointConfig.parseJobThreadPoolSize</name>
            <displayName>Parse Job ThreadPool Size in Each Parse Task</displayName>
            <description>parse job thread pool size in each parse task</description>
            <value>2</value>
        </property>
        <property>
            <name>endpointConfig.rmUrls</name>
            <displayName>Resource Manager URLs</displayName>
            <description>resource manager urls of this site</description>
            <value>http://sandbox.hortonworks.com:8088</value>
            <required>true</required>
        </property>

        <property>
            <name>MRConfigureKeys.jobConfigKey</name>
            <displayName>Map Reduce Extracted Configuration Keys</displayName>
            <description>which configures will be extracted from map reduce job configurations</description>
            <value>mapreduce.map.output.compress,
                mapreduce.map.output.compress.codec,
                mapreduce.output.fileoutputformat.compress,
                mapreduce.output.fileoutputformat.compress.type,
                mapreduce.output.fileoutputformat.compress.codec,
                mapred.output.format.class,
                dataplatform.etl.info,
                mapreduce.map.memory.mb,
                mapreduce.reduce.memory.mb,
                mapreduce.map.java.opts,
                mapreduce.reduce.java.opts</value>
        </property>
        <property>
            <name>MRConfigureKeys.jobNameKey</name>
            <displayName>Map Reduce Job Name Key</displayName>
            <description>User use -Dkey=value to specify name of a job when submit. use this to extract job name from job configuration</description>
            <value>eagle.job.name</value>
        </property>

        <!-- Accepted App Stream -->
        <property>
            <name>dataSinkConfig.ACCEPTED_APP_STREAM.topic</name>
            <displayName>Destination(Kafka Topic) Of App Stream Data</displayName>
            <value>yarn_accepted_app_{siteId}</value>
            <description>topic for kafka data sink</description>
            <required>true</required>
        </property>
        <property>
            <name>dataSinkConfig.brokerList</name>
            <displayName>dataSinkConfig.brokerList</displayName>
            <value>localhost:6667</value>
            <description>kafka broker list</description>
            <required>true</required>
            <required>true</required>
        </property>
        <property>
            <name>dataSinkConfig.serializerClass</name>
            <displayName>dataSinkConfig.serializerClass</displayName>
            <value>kafka.serializer.StringEncoder</value>
            <description>serializer class Kafka message value</description>
        </property>
        <property>
            <name>dataSinkConfig.keySerializerClass</name>
            <displayName>dataSinkConfig.keySerializerClass</displayName>
            <value>kafka.serializer.StringEncoder</value>
            <description>serializer class Kafka message key</description>
        </property>
        <property>
            <name>dataSinkConfig.producerType</name>
            <displayName>dataSinkConfig.producerType</displayName>
            <value>async</value>
            <description>whether the messages are sent asynchronously in a background thread</description>
        </property>
        <property>
            <name>dataSinkConfig.numBatchMessages</name>
            <displayName>dataSinkConfig.numBatchMessages</displayName>
            <value>4096</value>
            <description>number of messages to send in one batch when using async mode</description>
        </property>
        <property>
            <name>dataSinkConfig.maxQueueBufferMs</name>
            <displayName>dataSinkConfig.maxQueueBufferMs</displayName>
            <value>5000</value>
            <description>maximum time to buffer data when using async mode</description>
        </property>
        <property>
            <name>dataSinkConfig.requestRequiredAcks</name>
            <displayName>dataSinkConfig.requestRequiredAcks</displayName>
            <value>0</value>
            <description>value controls when a produce request is considered completed</description>
        </property>
    </configuration>
    <streams>
        <stream>
            <streamId>ACCEPTED_APP_STREAM</streamId>
            <description>Accepted App Info Stream</description>
            <validate>true</validate>
            <columns>
                <column>
                    <name>id</name>
                    <type>string</type>
                </column>
                <column>
                    <name>site</name>
                    <type>string</type>
                </column>
                <column>
                    <name>appName</name>
                    <type>string</type>
                </column>
                <column>
                    <name>queue</name>
                    <type>string</type>
                </column>
                <column>
                    <name>state</name>
                    <type>string</type>
                </column>
                <column>
                    <name>user</name>
                    <type>string</type>
                </column>
                <column>
                    <name>trackingUrl</name>
                    <type>string</type>
                </column>
                <column>
                    <name>elapsedTime</name>
                    <type>long</type>
                </column>
                <column>
                    <name>startedTime</name>
                    <type>long</type>
                </column>
                <column>
                    <name>queueUsagePercentage</name>
                    <type>double</type>
                </column>
                <column>
                    <name>clusterUsagePercentage</name>
                    <type>double</type>
                </column>
            </columns>
        </stream>
    </streams>
    <docs>
        <install>
            # Step 1: Create source kafka topic named "${site}_example_source_topic"

            ./bin/kafka-topics.sh --create --topic example_source_topic --replication-factor 1 --replication 1

            # Step 2: Set up data collector to flow data into kafka topic in

            ./bin/logstash -f log_collector.conf

            ## `log_collector.conf` sample as following:

            input {

            }
            filter {

            }
            output{

            }

            # Step 3: start application

            # Step 4: monitor with featured portal or alert with policies
        </install>
        <uninstall>
            # Step 1: stop and uninstall application
            # Step 2: delete kafka topic named "${site}_example_source_topic"
            # Step 3: stop logstash
        </uninstall>
    </docs>
</application>