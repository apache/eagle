/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Compile: protoc -I ~/Workspace/hbase/hbase-protocol/src/main/protobuf/ -I src/main/protobuf --java_out=src/main/java src/main/protobuf/AggregateProtocol.proto
 */
option java_package = "org.apache.eagle.storage.hbase.query.coprocessor.generated";
option java_outer_classname = "AggregateProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

/**
 * HBase Client.proto
 */
import "Client.proto";


//message ScanWrapper{
//    required bytes byte_array = 1;
//}

message EntityDefinition {
    required bytes byte_array = 1;
}

message AggregateResult {
    required bytes byte_array = 1;
}

message AggregateRequest {
    required EntityDefinition entity_definition = 1;
    required Scan scan = 2;
    repeated string groupby_fields = 3;
    repeated bytes aggregate_func_types = 4;
    repeated string aggregated_fields = 5;
}

message TimeSeriesAggregateRequest {
    required EntityDefinition entity_definition = 1;
    required Scan scan = 2;
    repeated string groupby_fields = 3;
    repeated bytes aggregate_func_types = 4;
    repeated string aggregated_fields = 5;
    required int64 start_time = 6;
    required int64 end_time = 7;
    required int64 interval_min = 8;
}

service AggregateProtocol {
    rpc aggregate (AggregateRequest) returns (AggregateResult);
    rpc timeseriesAggregate (TimeSeriesAggregateRequest) returns (AggregateResult);
}